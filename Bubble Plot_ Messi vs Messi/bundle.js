(function () {
  'use strict';

  // set the dimensions and margins of the graph
  var margin = {top: 40, right: 150, bottom: 60, left: 30},
      width = 500 - margin.left - margin.right,
      height = 420 - margin.top - margin.bottom;

  // append the svg object to the body of the page
  var svg = d3.select("#my_dataviz")
    .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

  //Read the data
  d3.csv("https://gist.githubusercontent.com/simonalt/eef8aae608788df16c87b3f714656ac2/raw/2a0ef318404d6d6d99a1b2d26f032d7ce0bb29ac/data.csv", function(data) {

    // ---------------------------//
    //       AXIS  AND SCALE      //
    // ---------------------------//

    // Add X axis
    var x = d3.scaleLinear()
      .domain([0, 36])
      .range([ 0, width ]);
    svg.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x).ticks(3));

    // Add X axis label:
    svg.append("text")
        .attr("text-anchor", "end")
        .attr("x", width)
        .attr("y", height + 50)
        .text("Assists");

    // Add Y axis
    var y = d3.scaleLinear()
      .domain([0, 91])
      .range([ height, 0]);
    svg.append("g")
      .call(d3.axisLeft(y));

    // Add Y axis label:
    svg.append("text")
        .attr("text-anchor", "end")
        .attr("x", 0)
        .attr("y", -20 )
        .text("Goals")
        .attr("text-anchor", "start");

    // Add a scale for bubble size
    var z = d3.scaleSqrt()
      .domain([0, 91])
      .range([0, 36]);

    // Add a scale for bubble color
    var myColor = d3.scaleOrdinal()
      .domain(["2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022"])
    	.range(["#EA61E2", "#E2EA61", "#EA7261", "#61ACEA", "#61EA95", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5", "#D5D2D5"]);


    // ---------------------------//
    //      TOOLTIP               //
    // ---------------------------//

    // -1- Create a tooltip div that is hidden by default:
    var tooltip = d3.select("#my_dataviz")
      .append("div")
        .style("opacity", 0)
        .attr("class", "tooltip")
        .style("background-color", "black")
        .style("border-radius", "5px")
        .style("padding", "10px")
        .style("color", "white");

    // -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip
    var showTooltip = function(d) {
      tooltip
        .transition()
        .duration(200);
      tooltip
        .style("opacity", 1)
        .html(d.YearInfo)
        .style("left", (d3.mouse(this)[0]+30) + "px")
        .style("top", (d3.mouse(this)[1]+30) + "px");
    };
    var moveTooltip = function(d) {
      tooltip
        .style("left", (d3.mouse(this)[0]+30) + "px")
        .style("top", (d3.mouse(this)[1]+30) + "px");
    };
    var hideTooltip = function(d) {
      tooltip
        .transition()
        .duration(200)
        .style("opacity", 0);
    };


    // ---------------------------//
    //       HIGHLIGHT GROUP      //
    // ---------------------------//

    // What to do when one group is hovered
    var highlight = function(d){
      // reduce opacity of all groups
      d3.selectAll(".bubbles").style("opacity", .05);
      // expect the one that is hovered
      d3.selectAll("."+d).style("opacity", 1);
    };

    // And when it is not hovered anymore
    var noHighlight = function(d){
      d3.selectAll(".bubbles").style("opacity", 1);
    };


    // ---------------------------//
    //       CIRCLES              //
    // ---------------------------//

    // Add dots
    svg.append('g')
      .selectAll("dot")
      .data(data)
      .enter()
      .append("circle")
        .attr("class", function(d) { return "bubbles " + d.Year })
        .attr("cx", function (d) { return x(d.Assists); } )
        .attr("cy", function (d) { return y(d.Goals); } )
        .attr("r", function (d) { return z(d.pop); } )
        .style("fill", function (d) { return myColor(d.Year); } )
      // -3- Trigger the functions for hover
      .on("mouseover", showTooltip )
      .on("mousemove", moveTooltip )
      .on("mouseleave", hideTooltip );



      // ---------------------------//
      //       LEGEND              //
      // ---------------------------//

      // Add legend: circles
      var valuesToShow = [1, 22.75, 91];
      var xCircle = 390;
      var xLabel = 440;
      svg
        .selectAll("legend")
        .data(valuesToShow)
        .enter()
        .append("circle")
          .attr("cx", xCircle)
          .attr("cy", function(d){ return height - 100 - z(d) } )
          .attr("r", function(d){ return z(d) })
          .style("fill", "none")
          .attr("stroke", "black");

      // Add legend: segments
      svg
        .selectAll("legend")
        .data(valuesToShow)
        .enter()
        .append("line")
          .attr('x1', function(d){ return xCircle + z(d) } )
          .attr('x2', xLabel)
          .attr('y1', function(d){ return height - 100 - z(d) } )
          .attr('y2', function(d){ return height - 100 - z(d) } )
          .attr('stroke', 'black')
          .style('stroke-dasharray', ('2,2'));

      // Add legend: labels
      svg
        .selectAll("legend")
        .data(valuesToShow)
        .enter()
        .append("text")
          .attr('x', xLabel)
          .attr('y', function(d){ return height - 100 - z(d) } )
          .text( function(d){ return d / 55.5663717 } )
          .style("font-size", 10)
          .attr('alignment-baseline', 'middle');

      // Legend title
      svg.append("text")
        .attr('x', xCircle)
        .attr("y", height - 100 +30)
        .text("Goals + Assists")
        .attr("text-anchor", "middle");
    	svg.append("text")
        .attr('x', xCircle)
        .attr("y", height - 100 + 45)
        .text("Ratio per Year")
        .attr("text-anchor", "middle");

      // Add one dot in the legend for each name.
      var size = 20;
      var allgroups = ["2004", "2005", "2006", "2007", "2008"];
      svg.selectAll("myrect")
        .data(allgroups)
        .enter()
        .append("circle")
          .attr("cx", 390)
          .attr("cy", function(d,i){ return 10 + i*(size+5)}) // 100 is where the first dot appears. 25 is the distance between dots
          .attr("r", 7)
          .style("fill", function(d){ return myColor(d)})
          .on("mouseover", highlight)
          .on("mouseleave", noHighlight);

      // Add labels beside legend dots
      svg.selectAll("mylabels")
        .data(allgroups)
        .enter()
        .append("text")
          .attr("x", 390 + size*.8)
          .attr("y", function(d,i){ return i * (size + 5) + (size/2)}) // 100 is where the first dot appears. 25 is the distance between dots
          .style("fill", function(d){ return myColor(d)})
          .text(function(d){ return d})
          .attr("text-anchor", "left")
          .style("alignment-baseline", "middle")
          .on("mouseover", highlight)
          .on("mouseleave", noHighlight);
    });

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,